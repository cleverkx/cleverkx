<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kongx</title>
  
  <subtitle>We all make choices in life , The hard thing is to live with them !</subtitle>
  <link href="/cleverkx/atom.xml" rel="self"/>
  
  <link href="https://github.com/cleverkx/"/>
  <updated>2019-07-07T00:47:29.867Z</updated>
  <id>https://github.com/cleverkx/</id>
  
  <author>
    <name>kongx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于node的express框架</title>
    <link href="https://github.com/cleverkx/2019/07/05/%E5%9F%BA%E4%BA%8ENode%E7%9A%84express%E6%A1%86%E6%9E%B6/"/>
    <id>https://github.com/cleverkx/2019/07/05/基于Node的express框架/</id>
    <published>2019-07-05T08:20:00.000Z</published>
    <updated>2019-07-07T00:47:29.867Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cleverkx\assets\css\APlayer.min.css"><script src="\cleverkx\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>使用基于node的web开发框架搭建web应用，常见的Nodej框架有express,koa,egg</p><h1 id="一、express的安装和使用"><a href="#一、express的安装和使用" class="headerlink" title="一、express的安装和使用"></a>一、express的安装和使用</h1><h2 id="1-安装方法"><a href="#1-安装方法" class="headerlink" title="1.安装方法"></a>1.安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$npm init -y//初始化npm,package.json里名默认为打开安装的文件夹的名称，加-y默认安装的全为yes</span><br><span class="line">$npm install express --save//也可简写为$npm i express -S</span><br></pre></td></tr></table></figure><h2 id="2-创建基本Express-web服务器"><a href="#2-创建基本Express-web服务器" class="headerlink" title="2.创建基本Express web服务器"></a>2.创建基本Express web服务器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);<span class="comment">//引用上面安装好的express第三方模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);<span class="comment">//引用nodejs自带的核心模块</span></span><br><span class="line"><span class="keyword">const</span> app = express()<span class="comment">//创建web服务器，app名字可以任意取</span></span><br><span class="line"><span class="comment">//处理get请求</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  <span class="comment">//res.send('你好!')//express封装好的send方法可以输出中文,用默认原生自带的end只能输出英文</span></span><br><span class="line">  res.sendFile(path.join(__dirname,<span class="string">'./views/home.html'</span>))</span><br><span class="line">&#125;)</span><br><span class="line">app.use(express.static(<span class="string">'./views'</span>))<span class="comment">//可以访问views底下的所有文件，如果下面还有文件夹，可以写成例如views/m/index.html，访问到views/底下的m文件夹里的index.html文件,此方法为静态资源托管，在下面会有解释</span></span><br><span class="line"><span class="comment">//处理post请求</span></span><br><span class="line">app.post(<span class="string">'/'</span>,(req,res)=&gt;&#123;&#125;)<span class="comment">//同上处理get请求一样</span></span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="string">'127.0.0.1'</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server running at http://localhost:3000/'</span>)</span><br><span class="line">&#125;)<span class="comment">//参数127.0.0.1可省略,默认使用本地host服务器，设置的端口号为3000，这句话一定要写，此方法为监听服务器启动</span></span><br></pre></td></tr></table></figure><h2 id="3-express两个快捷方法"><a href="#3-express两个快捷方法" class="headerlink" title="3.express两个快捷方法"></a>3.express两个快捷方法</h2><ul><li>1.res.send()<br>  1.支持 发送 字符串 Content-Type:text/html;<br>  2.支持 发送 对象 或 数组 Content-Type:application/json<br>  3.支持 发送 Buffer 读取文件夹时输出的buffer值为二进制</li><li>2.res.sendFile()<br>用法1：res.sendFile(path.join(<strong>dirname,’./view/index.html’));<br>用法2:：res.sendFile(‘./view/index.html’,{root:</strong>dirname})<br>此方法用于向浏览器发送静态页面<h1 id="二、使用express-static托管静态文件"><a href="#二、使用express-static托管静态文件" class="headerlink" title="二、使用express.static托管静态文件"></a>二、使用express.static托管静态文件</h1><h2 id="1-为什么要托管静态文件："><a href="#1-为什么要托管静态文件：" class="headerlink" title="1.为什么要托管静态文件："></a>1.为什么要托管静态文件：</h2>当有很多静态页面时，使用res.sendFile返回页面会很麻烦<h2 id="2-托管方法"><a href="#2-托管方法" class="headerlink" title="2.托管方法"></a>2.托管方法</h2>app.use()方法，是专门用来注册中间件；<br>express.static 是express的内置中间件</li></ul><p>语法1：不加虚拟目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'./views'</span>))</span><br></pre></td></tr></table></figure><p>语法2：加虚拟目录</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/虚拟目录'</span>,express.static(<span class="string">'./views'</span>))</span><br></pre></td></tr></table></figure><p>访问时必须在目录前加虚拟目录名字，具体注意事项在上面已提及</p><h1 id="三、express使用ejs模板引擎渲染页面"><a href="#三、express使用ejs模板引擎渲染页面" class="headerlink" title="三、express使用ejs模板引擎渲染页面"></a>三、express使用ejs模板引擎渲染页面</h1><h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1.使用方法"></a>1.使用方法</h2><p>1.安装ejs模板引擎 npm i ejs -S<br>2.配置模板引擎类型 app.set(‘view engine’,’ejs’)//固定语法，不可更改<br>3.配置模板文件的存放路径 app.set(‘views’,’./ejs_pages’)//views是固定语法不可更改，ejs_pages为文件存放的本地路径<br>4.在请求处理函数里，使用res.render()来渲染模板页面<br>res.render(‘index.ejs’,{要渲染的数据对象})</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.set(<span class="string">'view engine'</span>,<span class="string">'ejs'</span>);<span class="comment">//设置模板引擎类型</span></span><br><span class="line">app.set(<span class="string">'views'</span>,<span class="string">'./ejs_pages'</span>)<span class="comment">//设置模板文件目录</span></span><br><span class="line">app.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  res.render(<span class="string">'index.ejs'</span>,&#123;</span><br><span class="line">    name:<span class="string">'kx'</span>,</span><br><span class="line">    age:<span class="number">18</span>,</span><br><span class="line">    hobby:[<span class="string">'吃饭'</span>,<span class="string">'敲代码'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at http://localhost:3000/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ejs页面里使用方法和语法和art-template的原生语法相同</p><h1 id="四、使用express路由分发请求"><a href="#四、使用express路由分发请求" class="headerlink" title="四、使用express路由分发请求"></a>四、使用express路由分发请求</h1><p>新建一个router.js路由模块，负责创建路由对象并导出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装一个router.js路由模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()<span class="comment">//创建路由对象</span></span><br><span class="line">router.get(<span class="string">'/'</span>,(req,res)=&gt;&#123;&#125;)</span><br><span class="line">router.get(<span class="string">'/music'</span>,(req,res)=&gt;&#123;&#125;)</span><br><span class="line">router.get(<span class="string">'/about'</span>,(req,res)=&gt;&#123;&#125;)</span><br><span class="line"><span class="comment">//导出路由对象</span></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure></p><p>需要使用路由的文件引用router.js模块<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入自己的路由模块</span></span><br><span class="line"><span class="keyword">const</span> router =<span class="built_in">require</span>(<span class="string">'./router.js'</span>)</span><br><span class="line"><span class="comment">//使用app.use()来注册路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(router);</span><br><span class="line">app.listen(<span class="number">3000</span>,()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'server is running at http://localhost:3000/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="五、中间件的概念"><a href="#五、中间件的概念" class="headerlink" title="五、中间件的概念"></a>五、中间件的概念</h1><p>上面文章中说到app.use是注册中间件用的，那么什么是中间件呢？</p><h2 id="1-什么是中间件"><a href="#1-什么是中间件" class="headerlink" title="1.什么是中间件"></a>1.什么是中间件</h2><p>中间件其实就是一个处理函数，形参包含三个参数：req(请求对象),res(响应对象),next(调用下一个中间件)</p><ul><li>只要地址栏发送了请求就会执行中间件</li><li>想要继续执行中间件，必须在函数内调用next()方法</li><li>req,res在nodejs不同的中间件里都是同一个对象</li></ul><h2 id="2-express中间件的分类"><a href="#2-express中间件的分类" class="headerlink" title="2.express中间件的分类"></a>2.express中间件的分类</h2><ul><li><p>1.应用级别的中间件：挂载到app上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'url地址'</span>,(req,res,next) =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>2.路由级别的中间件：挂载到router对象上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">'url地址'</span>,(req,res,next) =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>3.错误级别的中间件：回调函数中，有四个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;&#125;)<span class="comment">//最常用</span></span><br></pre></td></tr></table></figure></li><li><p>4.唯一内置的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">'./view'</span>))<span class="comment">//托管静态文件使用</span></span><br></pre></td></tr></table></figure></li><li><p>5.第三方中间件：非express框架提供的，需要程序员手动安装才能使用的中间件<br>  body-parser  解析post表单数据</p></li></ul><h1 id="六、express操作mysql数据库"><a href="#六、express操作mysql数据库" class="headerlink" title="六、express操作mysql数据库"></a>六、express操作mysql数据库</h1><p>使用express对Mysql数据库进行增删改查</p><h2 id="1-安装数据库模块"><a href="#1-安装数据库模块" class="headerlink" title="1.安装数据库模块"></a>1.安装数据库模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mysql -S</span><br></pre></td></tr></table></figure><h2 id="2-导入mysql模块"><a href="#2-导入mysql模块" class="headerlink" title="2.导入mysql模块"></a>2.导入mysql模块</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br></pre></td></tr></table></figure><h2 id="3-创建连接对象"><a href="#3-创建连接对象" class="headerlink" title="3. 创建连接对象"></a>3. 创建连接对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> conn = mysql.createConnection(&#123;</span><br><span class="line">  host:<span class="string">'主机名'</span>,</span><br><span class="line">  user:<span class="string">'用户名'</span>,</span><br><span class="line">  password:<span class="string">'密码'</span>,</span><br><span class="line">  database:<span class="string">'数据库名'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="4-执行sql语句"><a href="#4-执行sql语句" class="headerlink" title="4.执行sql语句"></a>4.执行sql语句</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn.query(<span class="string">'sql语句'</span>,<span class="string">'需要修改添加的对象，如果没有可省略'</span>,(err,result) =&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>新增语句<br>  可以使用 ? 占位符 + 数据对象实现：只能在node的mysql语句支持</p><pre><code>以前的sql语句也可以使用</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">uname</span>:<span class="string">'小黄'</span>,<span class="attr">age</span>:<span class="number">12</span>,<span class="attr">gender</span>:<span class="string">'男'</span>&#125;</span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">'insert into user set?'</span></span><br><span class="line">conn.query(sql,user,(err.result)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> res.send(err.message);</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改语句<br>  如果有多个 ? 占位符；数据对象有多个，要使用数组形式传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">uname</span>:<span class="string">'kx'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">'update users set ? where id=?'</span>;</span><br><span class="line">conn.query(sql,[user,user.id],(err.result)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">return</span> res.send(err.message);</span><br><span class="line">  <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="七、express获取参数"><a href="#七、express获取参数" class="headerlink" title="七、express获取参数"></a>七、express获取参数</h1><h2 id="1-使用req-query获取参数"><a href="#1-使用req-query获取参数" class="headerlink" title="1.使用req.query获取参数"></a>1.使用req.query获取参数</h2><p>地址栏参数要为这种形式:<a href="http://127.0.0.1:3000?name=kx&amp;age=18" target="_blank" rel="noopener">http://127.0.0.1:3000?name=kx&amp;age=18</a><br>req.query获取查询参数(查询参数：直接在地址栏后面拼接的参数)<br>使用postman发送get请求方式,<br>获取到查询参数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/user'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.query)<span class="comment">//&#123;name:'kx',age:18&#125;</span></span><br><span class="line">  res.send(<span class="string">'请求成功'</span>)<span class="comment">//给前台的数据显示请求成功</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="2-使用req-params获取参数-get请求最常用的方式"><a href="#2-使用req-params获取参数-get请求最常用的方式" class="headerlink" title="2.使用req.params获取参数(get请求最常用的方式)"></a>2.使用req.params获取参数(get请求最常用的方式)</h2><p>地址栏参数要为这种形式:<a href="http://127.0.0.1:3000/user/kx/18" target="_blank" rel="noopener">http://127.0.0.1:3000/user/kx/18</a><br>使用postman 发送get请求方式<br>获取到参数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/user/:name/:age'</span>,(req,res)=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params)<span class="comment">//&#123;name:'kx',age:18&#125;</span></span><br><span class="line">  res.send(<span class="string">'请求成功'</span>)<span class="comment">//给前台的数据显示请求成功</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="3-从post表单获取提交的数据"><a href="#3-从post表单获取提交的数据" class="headerlink" title="3. 从post表单获取提交的数据"></a>3. 从post表单获取提交的数据</h2><p>使用postman发送请求</p><ul><li>1.需要安装body-parser中间件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i body-parser -S</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>在处理post请求前注册中间件</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));<span class="comment">//固定格式，不要做修改</span></span><br></pre></td></tr></table></figure><ul><li>3.在请求处理函数里使用req.body获取post提交的数据(得到的为对象格式)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/user'</span>,(req,res) =&gt; &#123;</span><br><span class="line">  cosole.log(req.body)<span class="comment">//&#123;name:'kx',age:18&#125;</span></span><br><span class="line">  res.send(<span class="string">'请求成功'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cleverkx\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cleverkx\assets\js\A
      
    
    </summary>
    
      <category term="nodeJs" scheme="https://github.com/cleverkx/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="https://github.com/cleverkx/tags/nodeJs/"/>
    
      <category term="express" scheme="https://github.com/cleverkx/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>同源和跨域</title>
    <link href="https://github.com/cleverkx/2019/07/03/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/"/>
    <id>https://github.com/cleverkx/2019/07/03/同源和跨域/</id>
    <published>2019-07-03T10:55:00.000Z</published>
    <updated>2019-07-05T08:40:30.941Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cleverkx\assets\css\APlayer.min.css"><script src="\cleverkx\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、同源"><a href="#一、同源" class="headerlink" title="一、同源"></a>一、同源</h1><p>同源策略是浏览器的一种安全策略，所谓同源是指   域名，协议，端口完全相同</p><h1 id="二、跨域"><a href="#二、跨域" class="headerlink" title="二、跨域"></a>二、跨域</h1><h2 id="1-什么是跨域"><a href="#1-什么是跨域" class="headerlink" title="1.什么是跨域"></a>1.什么是跨域</h2><p>简单来说，不同源即跨域。域名，协议，端口有一项不同即跨域，如果只是目录不同，不算跨域。<br>允许跨域的标签：img,link,src,href.<br>跨域不是请求没有发出去，而是发出去之后，服务器也响应了，但是返回的数据被浏览器默认拦截了</p><h2 id="2-跨域解决方案"><a href="#2-跨域解决方案" class="headerlink" title="2.跨域解决方案"></a>2.跨域解决方案</h2><h3 id="1-服务器端跨域CORS"><a href="#1-服务器端跨域CORS" class="headerlink" title="1.服务器端跨域CORS"></a>1.服务器端跨域CORS</h3><pre><code>在请求的php文件中设置响应头：  header(&quot;Access-Control-Allow-Origin:*&quot;) 允许所有其他域向当前域发送请求。  header(&quot;Access-Control-Allow-Origin:http://www.aa.com&quot;) 允许指定的域向当前域发送请求。  不常用，服务器一般不允许这样设置</code></pre><h3 id="2-JSONP跨域方案"><a href="#2-JSONP跨域方案" class="headerlink" title="2.JSONP跨域方案"></a>2.JSONP跨域方案</h3><h4 id="1-JSONP原理（原生方法）"><a href="#1-JSONP原理（原生方法）" class="headerlink" title="1)JSONP原理（原生方法）"></a>1)JSONP原理（原生方法）</h4><ul><li><p>前台修改：<br>  其本质是利用了<script src></script>标签的src具有可跨域性，将操作数据的函数test拼接为callback的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> test = <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="http:/</span><span class="regexp">/comm2.com/i</span>ndex.php?callback=test<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>后台处理:<br>  服务端返回一个预先定义好的javaScript函数的调用，并且将服务器数据以该函数参数的形式传递过来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$callback = $_GET[<span class="string">"callback"</span>];</span><br><span class="line">$data=file_get_contents(<span class="string">"data.json"</span>);</span><br><span class="line"><span class="keyword">echo</span> $callback.<span class="string">"("</span>.$data.<span class="string">")"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>此方法只能以GET方式请求</p><h4 id="2-jquery使用JSONP跨域的步骤"><a href="#2-jquery使用JSONP跨域的步骤" class="headerlink" title="2)jquery使用JSONP跨域的步骤"></a>2)jquery使用JSONP跨域的步骤</h4><ul><li>前台修改：在ajax请求里设置dataType为jsonp，这一步骤本质将上面的原理封装好了，直接可以开启跨域请求<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  type:<span class="string">'get'</span>,</span><br><span class="line">  dataType:<span class="string">'jsonp'</span>,</span><br><span class="line">  url:<span class="string">'http://comm2.com/index.php'</span>,</span><br><span class="line">  success: <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>这种后台直接给前台请求的返回值，无需前台传数据</p><h3 id="3-反向代理服务器跨域方案"><a href="#3-反向代理服务器跨域方案" class="headerlink" title="3.反向代理服务器跨域方案"></a>3.反向代理服务器跨域方案</h3><p>反向代理其实就是，前端人员配置个代理服务器来接受客户端的请求，然后将请求发给真正的服务器，真正的做处理的服务器将处理结果返回给代理服务器，代理服务器再将结果发送给客户端。此方法利用的就是服务器与服务器之间不存在跨域的特性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cleverkx\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cleverkx\assets\js\A
      
    
    </summary>
    
      <category term="同源和跨域" scheme="https://github.com/cleverkx/categories/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/"/>
    
    
      <category term="同源" scheme="https://github.com/cleverkx/tags/%E5%90%8C%E6%BA%90/"/>
    
      <category term="跨域" scheme="https://github.com/cleverkx/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>nodeJs介绍和ES6语法</title>
    <link href="https://github.com/cleverkx/2019/07/02/nodeJs%E4%BB%8B%E7%BB%8D%E5%92%8CES6%E8%AF%AD%E6%B3%95/"/>
    <id>https://github.com/cleverkx/2019/07/02/nodeJs介绍和ES6语法/</id>
    <published>2019-07-02T03:30:00.000Z</published>
    <updated>2019-07-02T03:25:26.927Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cleverkx\assets\css\APlayer.min.css"><script src="\cleverkx\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="1-什么是node-js"><a href="#1-什么是node-js" class="headerlink" title="1.什么是node.js"></a>1.什么是node.js</h2><p>简单来说 node.js就是一个基于Chrome V8 引擎的一个运行环境<br>例如：</p><ul><li>java 安装 tomcat 环境</li><li>php  安装 phpstudy（安装了才可以执行php） 环境</li><li>python 安装对应python  环境</li><li>javascript 语言，对于我们平时开发中，前端必须打开浏览器，他才会执行，对于我们而言，浏览器就是我们前端执行JS的环境，而node.js可以将JS变成后端，可以操作数据库</li></ul><h2 id="2-nodeJS中javascript的组成部分"><a href="#2-nodeJS中javascript的组成部分" class="headerlink" title="2.nodeJS中javascript的组成部分"></a>2.nodeJS中javascript的组成部分</h2><p>ECMAscript核心+全局成员+核心API模块<br>nodejs无需操作浏览器，没有BOM和DOM的概念，取而代之的是全局成员和核心API</p><h2 id="3-运行nodeJS的方式"><a href="#3-运行nodeJS的方式" class="headerlink" title="3.运行nodeJS的方式"></a>3.运行nodeJS的方式</h2><ul><li>在powershell或者vscode的终端中输入node xx.js（注意：运行的JS文件要保证在你终端文件路径下有这个文件，注意路径问题）</li><li>使用repl方式，先输入node，进入repl命令，再输入js代码，这种方法不常用，对于开发人员代码编写很不友好</li></ul><h2 id="4-path环境变量"><a href="#4-path环境变量" class="headerlink" title="4.path环境变量"></a>4.path环境变量</h2><p>在Windows的高级系统设置里面设置Path环境变量为应用程序的路径，这样就可以在命令行快速启动应用程序</p><h1 id="二、ES6常用语法"><a href="#二、ES6常用语法" class="headerlink" title="二、ES6常用语法"></a>二、ES6常用语法</h1><h2 id="1-let和const声明变量"><a href="#1-let和const声明变量" class="headerlink" title="1.let和const声明变量"></a>1.let和const声明变量</h2><p>使用var定义变量存在预解析变量提升的问题；<br>使用var定义的变量没有块级{}作用域，容易造成变量污染</p><p>在ES6语法中使用let定义变量，不会产生变量提升，只能先定义再使用；在{}里使用let定义的变量会产生块级作用域，在{}之外不能访问，例如在if,for等里面<br>在ES6语法中也少量使用const声明常量，它除了具有let的特点之外，必须给初始值，不能被重新赋值修改</p><h2 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2.解构赋值"></a>2.解构赋值</h2><p>定义：从对象中把属性解放出来，当做变量来使用。语法：let{属性名1，属性名2}=对象名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">'kongx'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: username, age&#125; = user;</span><br><span class="line">username = <span class="string">'man'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(username)<span class="comment">//输出值为man</span></span><br><span class="line"><span class="built_in">console</span>.log(age)<span class="comment">//输出值为18</span></span><br><span class="line"><span class="built_in">console</span>.log(user.name)<span class="comment">//输出值为kongx，let解构赋值不会改变对象属性名对应的属性值</span></span><br></pre></td></tr></table></figure><h2 id="3-箭头函数"><a href="#3-箭头函数" class="headerlink" title="3.箭头函数"></a>3.箭头函数</h2><p>语法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;函数体&#125;;</span><br></pre></td></tr></table></figure></p><p>箭头函数函数实际就是一个匿名函数，没有函数名<br>箭头函数内部的this永远指向外部的this，解决了原生JS的需要修改this指向问题<br>同时可以给箭头函数取名字：let kongx = (形参) =&gt; {函数体}</p><p>箭头函数的变体：</p><ul><li>1.如果左侧形参只有一个，左侧的()可以省略</li><li>2.如果右侧函数体代码只有一行，右侧的{}可以省略，默认会返回执行结果，不能再加return</li><li>3.如果满足上面两个条件，可以同时省略()和{}</li></ul><h2 id="4-定义对象中的属性和方法的快捷方式"><a href="#4-定义对象中的属性和方法的快捷方式" class="headerlink" title="4.定义对象中的属性和方法的快捷方式"></a>4.定义对象中的属性和方法的快捷方式</h2><p>语法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"kongx"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;name,age,show,say()&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>对象的属性名和变量名相同时，不需要再写一次变量名，相当于”name”:name 省略成name,方法同理<br>对象内定义方法时say(){}相当于say:function(){}</p><h2 id="5-ES6模板字符串"><a href="#5-ES6模板字符串" class="headerlink" title="5.ES6模板字符串"></a>5.ES6模板字符串</h2><p>在javaScript拼接字符串时，需要使用大量的引号和+拼接才能得到我们需要的内容<br>ES6中提供了模板字符串，用 ` (反引号)标识，用${变量}将变量加入到反引号里面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`I age is <span class="subst">$&#123;age&#125;</span>`</span></span><br></pre></td></tr></table></figure></p><p>注意：模板字符串中的换行和空格都会原样输出</p><ul><li><p>在${}中的大括号里可以放入任意的javaScript表达式，还可以进行运算，以及引用对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">let</span> y=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`a=<span class="subst">$&#123;++x&#125;</span>,y=<span class="subst">$&#123;x+y&#125;</span>`</span>);<span class="comment">//a=10,y=20</span></span><br></pre></td></tr></table></figure></li><li><p>模板字符串还可以调用函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> say = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"i like es6"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我想说<span class="subst">$&#123;say()&#125;</span>`</span>)<span class="comment">//我想说i like es6</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cleverkx\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cleverkx\assets\js\A
      
    
    </summary>
    
      <category term="nodeJs" scheme="https://github.com/cleverkx/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="https://github.com/cleverkx/tags/nodeJs/"/>
    
      <category term="ES6" scheme="https://github.com/cleverkx/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化开发思想</title>
    <link href="https://github.com/cleverkx/2019/05/05/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/"/>
    <id>https://github.com/cleverkx/2019/05/05/vue组件化开发/</id>
    <published>2019-05-05T13:20:00.000Z</published>
    <updated>2019-07-21T13:02:55.502Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cleverkx\assets\css\APlayer.min.css"><script src="\cleverkx\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、组件化开发思想"><a href="#一、组件化开发思想" class="headerlink" title="一、组件化开发思想"></a>一、组件化开发思想</h1><h2 id="1-现实中的组件化思想"><a href="#1-现实中的组件化思想" class="headerlink" title="1.现实中的组件化思想"></a>1.现实中的组件化思想</h2><p>标准、分治、重用、组合</p><h2 id="2-编程中的组件化思想"><a href="#2-编程中的组件化思想" class="headerlink" title="2.编程中的组件化思想"></a>2.编程中的组件化思想</h2><p>组件就是将一段UI样式和其对应的功能作为独立的整体去看待，无论这个整体放在哪里去使用，它都具有一样的功能和样式，从而实现复用，这种整体化的思想就是组件化</p><h2 id="3-组件化规范web-components"><a href="#3-组件化规范web-components" class="headerlink" title="3.组件化规范web components"></a>3.组件化规范web components</h2><p>目的：尽可能多的重用代码<br>通过创建封装好功能的定制元素解决组件化不容易实现的问题<br>vue部分实现了上述规范<br>根组件:new Vue可以看做一个最大的组件app</p><h1 id="二、组件注册"><a href="#二、组件注册" class="headerlink" title="二、组件注册"></a>二、组件注册</h1><h2 id="1-全局注册"><a href="#1-全局注册" class="headerlink" title="1.全局注册"></a>1.全局注册</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(组件名称,&#123;</span><br><span class="line">  data:组件数据</span><br><span class="line">  template:组件模板内容</span><br><span class="line">  method:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>1.组件命名方式使用小写字母+短横线 或者 驼峰式<br>  如果使用驼峰式，只能在模板内容里使用驼峰式<pre><code>但是在vue容器里使用，只能用短横线形式，最好只用短横线</code></pre></li><li>2.组件数据时一个函数 要return一个对象，对象里写数据</li><li>3.组件模板内容是一个字符串，根元素只能有一个<br>  支持插值表达式<pre><code>支持ES6模板字符串``增加可读性</code></pre></li></ul><p>用法：写在vue容器里，当做普通标签使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">组件名称</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名称</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以重复使用，并且每个组件的数据都是独立的</p><h2 id="2-局部组件注册"><a href="#2-局部组件注册" class="headerlink" title="2.局部组件注册"></a>2.局部组件注册</h2><p>写在vue的实例里，只能在注册它的父组件里使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line"><span class="string">'组件名称'</span>:组件内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>组件内容可以在外部用对象的形式定义</p><h1 id="三、组件间数据传递"><a href="#三、组件间数据传递" class="headerlink" title="三、组件间数据传递"></a>三、组件间数据传递</h1><h2 id="父子相互传值"><a href="#父子相互传值" class="headerlink" title="父子相互传值"></a>父子相互传值</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">my-car</span>&gt;</span><span class="tag">&lt;/<span class="name">my-car</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> carTitle = &#123;</span></span><br><span class="line"><span class="javascript">            props: [<span class="string">'uname'</span>],</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123;uname&#125;&#125;的商品<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,//首先先在父组件里设置局部组件,在父组件my-car模板里绑定:uname='uname'意思就是将父组件data里的值uname传入子组件props里的uname,子组件里的模板引擎就可以直接使用uname的值了</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> carContent = &#123;</span></span><br><span class="line"><span class="javascript">            props: [<span class="string">'list'</span>],</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span> v-<span class="keyword">for</span>=<span class="string">'(item,index) in list'</span>&gt;</span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.img"</span> /&gt;</span></span></span><br><span class="line"><span class="javascript">                        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"name"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">span</span>&gt;</span>￥&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"change"</span>&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'less(item.id)'</span>&gt;</span>－<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                            &lt;input type=<span class="string">"text"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"num"</span> v-model=<span class="string">'item.num'</span>/&gt;</span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">'add(item.id)'</span>&gt;</span>＋<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"del"</span> @click=<span class="string">'del(item.id)'</span>&gt;×&lt;<span class="regexp">/div&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="javascript">                &lt;<span class="regexp">/div&gt;`,/</span><span class="regexp">/此模板里的事件触发直接在此对象里的methods方法里写来引用</span></span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                add(id) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$emit(<span class="string">'addNum'</span>, &#123;</span></span><br><span class="line"><span class="undefined">                        id: id,</span></span><br><span class="line"><span class="javascript">                        type: <span class="string">'up'</span></span></span><br><span class="line"><span class="javascript">                    &#125;)<span class="comment">//这个绑定父元素的@addNum='addNuma'(相当于将点击事件click变成addNum，父元素将方法里的addNuma的形参接收子元素传送的对象&#123;id:id,type: 'up'&#125;，真正对于数据处理的还是父组件里的方法，子组件主要还是传id等参数)</span></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                less(id) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$emit(<span class="string">'downNum'</span>, &#123;</span></span><br><span class="line"><span class="undefined">                        id: id,</span></span><br><span class="line"><span class="javascript">                        type: <span class="string">'down'</span></span></span><br><span class="line"><span class="undefined">                    &#125;)</span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                del(id) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.$emit(<span class="string">'delShop'</span>, id)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> carTotal = &#123;</span></span><br><span class="line"><span class="javascript">            props: [<span class="string">'list'</span>],</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"total"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>总价：&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>结算<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">            computed: &#123;</span></span><br><span class="line"><span class="undefined">                total() &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.list.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                        sum += item.price * item.num;</span></span><br><span class="line"><span class="undefined">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> sum;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        Vue.component(<span class="string">'my-car'</span>, &#123;</span></span><br><span class="line"><span class="javascript">            data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    uname: <span class="string">'kx'</span>,</span></span><br><span class="line"><span class="undefined">                    list: [&#123;</span></span><br><span class="line"><span class="undefined">                        id: 1,</span></span><br><span class="line"><span class="javascript">                        name: <span class="string">'TCL彩电'</span>,</span></span><br><span class="line"><span class="undefined">                        price: 1000,</span></span><br><span class="line"><span class="undefined">                        num: 1,</span></span><br><span class="line"><span class="javascript">                        img: <span class="string">'img/a.jpg'</span></span></span><br><span class="line"><span class="undefined">                    &#125;, &#123;</span></span><br><span class="line"><span class="undefined">                        id: 2,</span></span><br><span class="line"><span class="javascript">                        name: <span class="string">'机顶盒'</span>,</span></span><br><span class="line"><span class="undefined">                        price: 1000,</span></span><br><span class="line"><span class="undefined">                        num: 1,</span></span><br><span class="line"><span class="javascript">                        img: <span class="string">'img/b.jpg'</span></span></span><br><span class="line"><span class="undefined">                    &#125;, &#123;</span></span><br><span class="line"><span class="undefined">                        id: 3,</span></span><br><span class="line"><span class="javascript">                        name: <span class="string">'海尔冰箱'</span>,</span></span><br><span class="line"><span class="undefined">                        price: 1000,</span></span><br><span class="line"><span class="undefined">                        num: 1,</span></span><br><span class="line"><span class="javascript">                        img: <span class="string">'img/c.jpg'</span></span></span><br><span class="line"><span class="undefined">                    &#125;, &#123;</span></span><br><span class="line"><span class="undefined">                        id: 4,</span></span><br><span class="line"><span class="javascript">                        name: <span class="string">'小米手机'</span>,</span></span><br><span class="line"><span class="undefined">                        price: 1000,</span></span><br><span class="line"><span class="undefined">                        num: 1,</span></span><br><span class="line"><span class="javascript">                        img: <span class="string">'img/d.jpg'</span></span></span><br><span class="line"><span class="undefined">                    &#125;, &#123;</span></span><br><span class="line"><span class="undefined">                        id: 5,</span></span><br><span class="line"><span class="javascript">                        name: <span class="string">'PPTV电视'</span>,</span></span><br><span class="line"><span class="undefined">                        price: 1000,</span></span><br><span class="line"><span class="undefined">                        num: 2,</span></span><br><span class="line"><span class="javascript">                        img: <span class="string">'img/e.jpg'</span></span></span><br><span class="line"><span class="undefined">                    &#125;]</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            template: `</span></span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"cart"</span>&gt;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">car-title</span> <span class="attr">:uname</span>=<span class="string">'uname'</span>&gt;</span><span class="tag">&lt;/<span class="name">car-title</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">car-content</span> <span class="attr">:list</span>=<span class="string">'list'</span> @<span class="attr">addNum</span>=<span class="string">'addNuma'</span> @<span class="attr">delShop</span>=<span class="string">'dell'</span> @<span class="attr">downNum</span>=<span class="string">'addNuma'</span>&gt;</span><span class="tag">&lt;/<span class="name">car-content</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">car-total</span> <span class="attr">:list</span>=<span class="string">'list'</span>&gt;</span><span class="tag">&lt;/<span class="name">car-total</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">            methods: &#123;</span></span><br><span class="line"><span class="undefined">                addNuma(val) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(val)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> item.id == val.id</span></span><br><span class="line"><span class="undefined">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (val.type == <span class="string">'up'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.list[index].num++;</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.type == <span class="string">'down'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">this</span>.list[index].num--;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(<span class="keyword">this</span>.list[index].num&lt;=<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">this</span>.list[index].num=<span class="number">0</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                &#125;,</span></span><br><span class="line"><span class="undefined">                dell(id) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(id);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> item.id == id</span></span><br><span class="line"><span class="undefined">                    &#125;)</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            components: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="string">'car-title'</span>: carTitle,</span></span><br><span class="line"><span class="javascript">                <span class="string">'car-content'</span>: carContent,</span></span><br><span class="line"><span class="javascript">                <span class="string">'car-total'</span>: carTotal,</span></span><br><span class="line"><span class="javascript">            &#125;<span class="comment">//父组件中加入局部组件</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">            data: &#123;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、组件插槽"><a href="#五、组件插槽" class="headerlink" title="五、组件插槽"></a>五、组件插槽</h1><p>在使用组件时,之前标签内没有写值,如果要写内容并传递,需要使用组件插槽<br>1)基本使用<br>slot标签<code>&lt;slot&gt;&lt;/slot&gt;</code>写在子组件的模板中;<br>使用组件时在标签之间填写内容</p><p>2)具名插槽<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">'header'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>标题信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">'footer'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>底部信息信息2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">'footers'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>好的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /*</span></span><br><span class="line"><span class="undefined">      具名插槽</span></span><br><span class="line"><span class="undefined">    */</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'base-layout'</span>, &#123;</span></span><br><span class="line"><span class="undefined">      template: `</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;slot name=<span class="string">'header'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="comment">//header这个里面放的p标签里标题信息</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;slot&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><span class="comment">//main里面显示的p标签里的主要内容</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'footer'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">'footers'</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      `</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cleverkx\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cleverkx\assets\js\A
      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/cleverkx/categories/vue/"/>
    
    
      <category term="vue" scheme="https://github.com/cleverkx/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue常用特性</title>
    <link href="https://github.com/cleverkx/2019/05/03/vue%E5%B8%B8%E7%94%A8%E7%89%B9%E6%80%A7/"/>
    <id>https://github.com/cleverkx/2019/05/03/vue常用特性/</id>
    <published>2019-05-03T12:20:00.000Z</published>
    <updated>2019-07-20T14:44:40.269Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cleverkx\assets\css\APlayer.min.css"><script src="\cleverkx\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、表单操作"><a href="#一、表单操作" class="headerlink" title="一、表单操作"></a>一、表单操作</h1><h2 id="1-单选框radio"><a href="#1-单选框radio" class="headerlink" title="1.单选框radio"></a>1.单选框radio</h2><p>先给表单元素设置不同的value<br><code>v-model</code>设置为同一个，如gender<br><code>data:{gender:&#39;&#39;}</code><br>设置的gender一般为空，如果你想浏览器默认打开选中哪个，你就在gender里填入需要的对应表单的value值,表单提交事件触发后把单选框内的value值给gender</p><h2 id="2-复选框checkbox"><a href="#2-复选框checkbox" class="headerlink" title="2.复选框checkbox"></a>2.复选框checkbox</h2><p>先给表单元素设置不同的value<br><code>v-model</code>设置为同一个，如hobby<br><code>data:{hobby:[]}</code><br>设置的hobby一般为空，如果你想浏览器默认打开选中哪个，你就在hobby里填入需要的对应表单的value值,表单提交事件触发后把复选框内的value值给gender</p><h2 id="3-下拉列表select"><a href="#3-下拉列表select" class="headerlink" title="3.下拉列表select"></a>3.下拉列表select</h2><p>分为单选和多选<br>单选:给select设置<code>v-model</code>,绑定给例如:occupation,给option设置value为1<br><code>data:{occupation:&#39;&#39;}</code><br>传值为单个value参数<br>多选:select设置<code>v-model</code>,绑定给例如:occupation,最后加一个multiple,数据写成数组<br><code>data:{occupation:[]}</code><br>传值为多个value参数放入数组中</p><h2 id="4-表单域修饰符"><a href="#4-表单域修饰符" class="headerlink" title="4.表单域修饰符"></a>4.表单域修饰符</h2><p>使用方法<code>v-model.修饰符=&#39;&#39;</code><br>修饰符可以为以下几个：<br>number 将表单输入转换为数字<br>trim 将表单输入去掉开始和结尾的空格<br>lazy 将input事件切换为change事件(失去焦点才会触发)</p><h1 id="二、自定义指令directive"><a href="#二、自定义指令directive" class="headerlink" title="二、自定义指令directive"></a>二、自定义指令directive</h1><h2 id="1-为什么需要自定义指令"><a href="#1-为什么需要自定义指令" class="headerlink" title="1.为什么需要自定义指令"></a>1.为什么需要自定义指令</h2><p>内置的13个指令不满足需求时，需要自定义指令<br><code>v-cloak</code>  <code>v-if(内可加判断,也可以直接写true,true为添加这行元素)</code> <code>v-show(加true为显示,false为display:none)</code> <code>v-else-if</code> <code>v-else</code> <code>v-for</code> <code>v-once(元素标签内直接写v-pre不需要加任何东西)</code> <code>v-html</code> <code>v-text</code> <code>v-pre(元素标签内直接写v-pre不需要加任何东西)</code> <code>v-model</code> <code>v-bind(可简写为:)</code> <code>v-on(可简写为@)</code></p><h2 id="2-语法规则"><a href="#2-语法规则" class="headerlink" title="2.语法规则"></a>2.语法规则</h2><ul><li>不带参数的自定义指令<br>例如自定义一个获取焦点的指令v-focus:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">'focus'</span>,&#123;</span><br><span class="line">  inserted:<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">  el.focus()<span class="comment">//el表示指令绑定的元素,原生的元素js写法</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>inserted是钩子函数,关于钩子函数: <a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/custom-directive.html</a><br>常用的钩子函数: inserted,bind只触发一次;update可以触发多次<br>钩子函数的参数: el,binding,vnode,oldVnode</p><ul><li><p>带参数的自定义指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-color=<span class="string">'msg'</span>&gt;&lt;/div&gt;</span><br><span class="line">Vue.directive(<span class="string">'color'</span>,&#123;</span><br><span class="line">bind: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>)</span>&#123;</span><br><span class="line"><span class="comment">//binding是一个对象,存放了指令相关的信息 如binding.value就是指令等号后面的值</span></span><br><span class="line">el.style.backgroundColor = binding.value</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">data:&#123;<span class="attr">msg</span>:<span class="string">'red'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>局部指令<br>是vue实例的一个属性,只在当前实例内可以使用<br>用法也是给元素添加v-focus<br>可以定义多个指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">directives:&#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    inserted:<span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="三、计算属性computed"><a href="#三、计算属性computed" class="headerlink" title="三、计算属性computed"></a>三、计算属性computed</h1><h2 id="1-为何需要计算属性"><a href="#1-为何需要计算属性" class="headerlink" title="1.为何需要计算属性"></a>1.为何需要计算属性</h2><p>插值表达式的计算逻辑可能比较复杂,计算属性可以使模板更加简洁</p><h2 id="2-计算属性的语法"><a href="#2-计算属性的语法" class="headerlink" title="2.计算属性的语法"></a>2.计算属性的语法</h2><p>computed是Vue实例的一个属性,调用方法不加()<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/Hello</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&#123;&#123;reverseStr&#125;&#125;&lt;/</span>div&gt; <span class="comment">//olleH</span></span><br><span class="line">data:&#123;<span class="attr">msg</span>:<span class="string">'Hello'</span>&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  reverseStr: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-计算属性和方法的区别"><a href="#3-计算属性和方法的区别" class="headerlink" title="3.计算属性和方法的区别"></a>3.计算属性和方法的区别</h2><p>methods方法不存在缓存;只要调用一次就会执行一次<br>插值表达式调用方法的语法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;Add()&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>computed 计算属性是基于和数据依赖进行缓存的，输出多次也只计算一次<br>调用methods里面的方法要加(),computed里的不需要</p><h1 id="四、侦听器watch"><a href="#四、侦听器watch" class="headerlink" title="四、侦听器watch"></a>四、侦听器watch</h1><h2 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1.应用场景"></a>1.应用场景</h2><p>数据变化时执行异步或开销较大的操作;极少情况下使用<br>侦听属性值变化</p><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  要侦听的data属性名: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">      <span class="comment">//val是变化后的属性值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、过滤器filter"><a href="#五、过滤器filter" class="headerlink" title="五、过滤器filter"></a>五、过滤器filter</h1><h2 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.作用</h2><p>格式化数据。比如格式化字符串，格式化日期时间等</p><h2 id="2-语法-1"><a href="#2-语法-1" class="headerlink" title="2.语法"></a>2.语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'过滤器名称'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="comment">//value是要处理的数据</span></span><br><span class="line">  <span class="keyword">return</span> xxx</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123;msg | 过滤器名称&#125;&#125;&lt;<span class="regexp">/div&gt;   /</span><span class="regexp">/(|:管道符)</span></span><br><span class="line"><span class="regexp">&lt;div&gt;&#123;&#123;msg | 过滤器1 | 过滤器2&#125;&#125;&lt;/</span>div&gt;</span><br><span class="line">&lt;div :pp=<span class="string">'msg | 过滤器'</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">//局部过滤器:</span></span><br><span class="line"><span class="comment">//和局部指令相似，写在Vue的实例里</span></span><br><span class="line"><span class="comment">//过滤器可以传递参数</span></span><br><span class="line">&lt;div&gt;&#123;&#123;msg | format(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/msg就是value</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/1,2,3就是function(value,a,b,c)里的a,b,c</span></span><br></pre></td></tr></table></figure></p><h1 id="六、实例的生命周期"><a href="#六、实例的生命周期" class="headerlink" title="六、实例的生命周期"></a>六、实例的生命周期</h1><h2 id="1-实例的不同阶段"><a href="#1-实例的不同阶段" class="headerlink" title="1.实例的不同阶段"></a>1.实例的不同阶段</h2><ul><li>挂载阶段<br>①beforeCreate在实例初始化之后，数据观测和事件配置之前被调用<br>②created在实例创建完成后被立即调用。一般提前获取数据，在这发ajax<br>③beforeMount在挂载开始之前被调用<br>④mounted el被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。挂载数据时在这发ajax</li><li>更新阶段<br>⑤beforeUpdate 数据更新时调用，发生在虚拟DOM打补丁之前<br>⑥updated由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子</li><li>销毁阶段<br>⑦beforeDestroy实例销毁之前调用<br>⑧destroyed实例销毁后调用</li></ul><p>方法写在vm属性里，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">data:&#123;...&#125;,</span><br><span class="line">method:&#123;...&#125;,</span><br><span class="line">created()&#123;</span><br><span class="line">  <span class="comment">//发送ajax请求获取数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="七、vue里的数组API"><a href="#七、vue里的数组API" class="headerlink" title="七、vue里的数组API"></a>七、vue里的数组API</h1><h2 id="1-变异方法-会修改原有数组"><a href="#1-变异方法-会修改原有数组" class="headerlink" title="1.变异方法 会修改原有数组"></a>1.变异方法 会修改原有数组</h2><p><code>push,pop,shift,unshift,splice,sort,reverse</code></p><h2 id="2-替换数组-生成新数组"><a href="#2-替换数组-生成新数组" class="headerlink" title="2.替换数组 生成新数组"></a>2.替换数组 生成新数组</h2><p><code>filter,concat,slice</code></p><h3 id="数组响应式变化"><a href="#数组响应式变化" class="headerlink" title="数组响应式变化"></a>数组响应式变化</h3><p>用索引修改数组，不是响应式的，可以用下面的方式修改<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(vm.list,index,<span class="string">'value'</span>)</span><br><span class="line">vm.$<span class="keyword">set</span>(vm.list,index,'value')</span><br></pre></td></tr></table></figure></p><p>第一个参数是要修改的数组,第二个是要修改元素的索引,第三个是想要修改的值<br>对象也有类似的情况。直接给对象添加属性，也不是响应式的；也可以用上面方法处理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cleverkx\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cleverkx\assets\js\A
      
    
    </summary>
    
      <category term="vue" scheme="https://github.com/cleverkx/categories/vue/"/>
    
    
      <category term="vue" scheme="https://github.com/cleverkx/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>git的基本安装和使用</title>
    <link href="https://github.com/cleverkx/2019/04/21/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/cleverkx/2019/04/21/git的基本安装和使用/</id>
    <published>2019-04-21T12:20:00.000Z</published>
    <updated>2019-07-20T14:45:10.298Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cleverkx\assets\css\APlayer.min.css"><script src="\cleverkx\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Git基础"><a href="#1-Git基础" class="headerlink" title="1. Git基础"></a>1. Git基础</h2><h3 id="1-1-版本管理"><a href="#1-1-版本管理" class="headerlink" title="1.1 版本管理"></a>1.1 版本管理</h3><h4 id="1-1-1-什么是版本管理"><a href="#1-1-1-什么是版本管理" class="headerlink" title="1.1.1 什么是版本管理"></a>1.1.1 什么是版本管理</h4><p>版本管理是一种记录文件变化的方式，以便将来查阅特定版本的文件内容。</p><h4 id="1-1-2-人为维护文档版本的问题"><a href="#1-1-2-人为维护文档版本的问题" class="headerlink" title="1.1.2 人为维护文档版本的问题"></a>1.1.2 人为维护文档版本的问题</h4><ol><li><p>文档数量多且命名不清晰导致文档版本混乱</p></li><li><p>每次编辑文档需要复制，不方便</p></li><li><p>多人同时编辑同一个文档，容易产生覆盖</p></li></ol><h3 id="1-2-Git-是什么"><a href="#1-2-Git-是什么" class="headerlink" title="1.2 Git 是什么"></a>1.2 Git 是什么</h3><p>Git是一个版本管理控制系统（缩写VCS），它可以在任何时间点，将文档的状态作为更新记录保存起来，也可以在任何时间点，将更新记录恢复回来。</p><h3 id="1-3-Git-安装"><a href="#1-3-Git-安装" class="headerlink" title="1.3 Git 安装"></a>1.3 Git 安装</h3><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载地址</a> </p><p>在安装的过程中，所有选项使用默认值即可。</p><h3 id="1-4-Git-基本工作流程"><a href="#1-4-Git-基本工作流程" class="headerlink" title="1.4 Git 基本工作流程"></a>1.4 Git 基本工作流程</h3><table><thead><tr><th>git仓库</th><th>暂存区</th><th>工作目录</th></tr></thead><tbody><tr><td>用于存放提交记录</td><td>临时存放被修改文件</td><td>被Git管理的项目目录</td></tr></tbody></table><h3 id="1-5-Git-的使用"><a href="#1-5-Git-的使用" class="headerlink" title="1.5 Git 的使用"></a>1.5 Git 的使用</h3><h4 id="1-5-1-Git-使用前配置"><a href="#1-5-1-Git-使用前配置" class="headerlink" title="1.5.1 Git 使用前配置"></a>1.5.1 Git 使用前配置</h4><p>在使用 git 前，需要告诉 git 你是谁，在向 git 仓库中提交时需要用到。</p><ol><li>配置提交人姓名：<code>git config --global user.name 提交人姓名</code></li><li>配置提交人姓名：<code>git config --global user.email 提交人邮箱</code> </li><li>查看git配置信息：<code>git config --list</code>   </li></ol><p><strong>注意</strong></p><ol><li><p>如果要对配置信息进行修改，重复上述命令即可。</p></li><li><p>配置只需要执行一次。</p></li></ol><h4 id="1-5-2-提交步骤（重要）"><a href="#1-5-2-提交步骤（重要）" class="headerlink" title="1.5.2 提交步骤（重要）"></a>1.5.2 提交步骤（重要）</h4><ol><li><code>git init</code> 初始化git仓库 （只需要一次就行）</li><li><code>git status</code> 查看文件状态</li><li><code>git add 文件列表//add后加.表示上传所有文件</code> 追踪文件</li><li><code>git commit -m 提交信息//提交的信息就是你更新的上传的日常更改备注</code>  向仓库中提交代码//</li><li><code>git log</code> 查看提交记录</li></ol><h4 id="1-5-2-（每次提交必须要做的事）"><a href="#1-5-2-（每次提交必须要做的事）" class="headerlink" title="1.5.2 （每次提交必须要做的事）"></a>1.5.2 （每次提交必须要做的事）</h4><ol><li>git add .       添加要提交的文件</li><li>git commit -m ‘登录功能完成’  提交到仓库</li><li>git remote add origin <a href="https://gitee.com/xx/xx.git" target="_blank" rel="noopener">https://gitee.com/xx/xx.git</a>  给地址取个名字叫 origin</li><li>git push -u origin master   提交到远程仓库(如果配置了ssh公用秘钥第三步就可以不用执行，第四步换成<code>git push ssh地址 master</code>)</li></ol><h4 id="1-5-3-撤销-了解"><a href="#1-5-3-撤销-了解" class="headerlink" title="1.5.3 撤销(了解)"></a>1.5.3 撤销(了解)</h4><ul><li><p>用暂存区中的文件覆盖工作目录中的文件： <code>git checkout 文件</code></p></li><li><p>将文件从暂存区中删除： <code>git rm --cached 文件</code></p></li><li>将 git 仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git rest --hard commitID</code> </li></ul><h2 id="2-Git进阶"><a href="#2-Git进阶" class="headerlink" title="2. Git进阶"></a>2. Git进阶</h2><h3 id="2-1-分支"><a href="#2-1-分支" class="headerlink" title="2.1 分支"></a>2.1 分支</h3><p>为了便于理解，大家暂时可以认为分支就是当前工作目录中代码的一份副本。</p><p>使用分支，可以让我们从开发主线上分离出来，以免影响开发主线。</p><h4 id="2-1-1-分支命令"><a href="#2-1-1-分支命令" class="headerlink" title="2.1.1 分支命令"></a>2.1.1 分支命令</h4><ul><li><p><code>git branch</code> 查看分支</p></li><li><p><code>git branch 分支名称</code> 创建分支</p></li><li><p><code>git checkout 分支名称</code> 切换分支或者 <code>git checkout -b 分支名称</code> 直接创建并且切换分支</p></li><li><p><code>git merge 来源分支</code> 合并分支 去master执行 合并其他分支</p></li><li><p><code>git branch -d 分支名称</code> 删除分支（分支被合并后才允许删除）（-D 强制删除）</p></li></ul><h3 id="2-2-暂时保存更改"><a href="#2-2-暂时保存更改" class="headerlink" title="2.2 暂时保存更改"></a>2.2 暂时保存更改</h3><p>在git中，可以暂时提取分支上所有的改动并存储，让开发人员得到一个干净的工作副本，临时转向其他工作。</p><p>使用场景：分支临时切换</p><ul><li>存储临时改动：<code>git stash</code></li><li>恢复改动：<code>git stash pop</code></li></ul><h2 id="3-Gitee中国"><a href="#3-Gitee中国" class="headerlink" title="3. Gitee中国"></a>3. Gitee中国</h2><p>这里注册我就不写了。</p><h3 id="3-1-多人协作开发流程"><a href="#3-1-多人协作开发流程" class="headerlink" title="3.1 多人协作开发流程"></a>3.1 多人协作开发流程</h3><ul><li>A在自己的计算机中创建本地仓库</li><li>A在github中创建远程仓库</li><li>A将本地仓库推送到远程仓库</li><li>B克隆远程仓库到本地进行开发</li><li>B将本地仓库中开发的内容推送到远程仓库</li><li>A将远程仓库中的最新内容拉去到本地</li></ul><h3 id="3-2-创建仓库"><a href="#3-2-创建仓库" class="headerlink" title="3.2 创建仓库"></a>3.2 创建仓库</h3><ol><li><p>填写仓库基本信息</p></li><li><p>将本地仓库推送到远程仓库</p><ol><li><p>git push 远程仓库地址 分支名称</p></li><li><p>git push 远程仓库地址别名 分支名称</p></li><li><p>git push -u 远程仓库地址别名 分支名称</p><p> -u 记住推送地址及分支，下次推送只需要输入git push即可</p></li><li><p>git remote add 远程仓库地址别名 远程仓库地址</p></li></ol></li></ol><h3 id="3-3-拉取操作"><a href="#3-3-拉取操作" class="headerlink" title="3.3 拉取操作"></a>3.3 拉取操作</h3><h4 id="3-3-1-克隆仓库"><a href="#3-3-1-克隆仓库" class="headerlink" title="3.3.1 克隆仓库"></a>3.3.1 克隆仓库</h4><p>克隆远端数据仓库到本地：<code>git clone 仓库地址</code></p><h4 id="3-3-2-拉取远程仓库中最新的版本"><a href="#3-3-2-拉取远程仓库中最新的版本" class="headerlink" title="3.3.2 拉取远程仓库中最新的版本"></a>3.3.2 拉取远程仓库中最新的版本</h4><p>拉取远程仓库中最新的版本：<code>git pull 远程仓库地址 分支名称</code></p><h3 id="3-4-解决冲突"><a href="#3-4-解决冲突" class="headerlink" title="3.4 解决冲突"></a>3.4 解决冲突</h3><p>在多人同时开发一个项目时，如果两个人修改了同一个文件的同一个地方，就会发生冲突。冲突需要人为解决。</p><h3 id="3-5-跨团队协作"><a href="#3-5-跨团队协作" class="headerlink" title="3.5 跨团队协作"></a>3.5 跨团队协作</h3><ol><li>程序员 C fork仓库</li><li>程序员 C 将仓库克隆在本地进行修改</li><li>程序员 C 将仓库推送到远程</li><li>程序员 C 发起pull reqest</li><li>原仓库作者审核</li><li>原仓库作者合并代码</li></ol><h3 id="3-6-ssh免登陆"><a href="#3-6-ssh免登陆" class="headerlink" title="3.6 ssh免登陆"></a>3.6 ssh免登陆</h3><p>码云配置ssh文档：<a href="https://gitee.com/help/articles/4181" target="_blank" rel="noopener">https://gitee.com/help/articles/4181</a><br>配置ssh公钥私钥<br>   https协议仓库地址：<a href="https://github.com/itcast-frontEnd/git-demo.git">https://github.com/itcast-frontEnd/git-demo.git</a></p><p>生成秘钥：<code>ssh-keygen</code></p><p>秘钥存储目录：C:\Users\用户\.ssh</p><p>公钥名称：id_rsa.pub</p><p>私钥名称：id_rsa</p><h3 id="3-7-GIT忽略清单"><a href="#3-7-GIT忽略清单" class="headerlink" title="3.7 GIT忽略清单"></a>3.7 GIT忽略清单</h3><p>将不需要被git管理的文件名字添加到此文件中，在执行git命令的时候，git就会忽略这些文件。</p><p>git忽略清单文件名称：<strong>.gitignore</strong></p><p>将工作目录中的文件全部添加到暂存区：<code>git add .</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cleverkx\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cleverkx\assets\js\A
      
    
    </summary>
    
      <category term="git" scheme="https://github.com/cleverkx/categories/git/"/>
    
    
      <category term="git" scheme="https://github.com/cleverkx/tags/git/"/>
    
  </entry>
  
</feed>
