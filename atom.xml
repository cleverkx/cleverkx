<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kongx</title>
  
  <subtitle>We all make choices in life , The hard thing is to live with them !</subtitle>
  <link href="/cleverkx/atom.xml" rel="self"/>
  
  <link href="https://github.com/cleverkx/"/>
  <updated>2019-07-02T03:25:26.927Z</updated>
  <id>https://github.com/cleverkx/</id>
  
  <author>
    <name>kongx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nodeJs介绍和ES6语法</title>
    <link href="https://github.com/cleverkx/2019/07/02/node.js%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>https://github.com/cleverkx/2019/07/02/node.js的简单介绍/</id>
    <published>2019-07-02T03:30:00.000Z</published>
    <updated>2019-07-02T03:25:26.927Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\cleverkx\assets\css\APlayer.min.css"><script src="\cleverkx\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><h2 id="1-什么是node-js"><a href="#1-什么是node-js" class="headerlink" title="1.什么是node.js"></a>1.什么是node.js</h2><p>简单来说 node.js就是一个基于Chrome V8 引擎的一个运行环境<br>例如：</p><ul><li>java 安装 tomcat 环境</li><li>php  安装 phpstudy（安装了才可以执行php） 环境</li><li>python 安装对应python  环境</li><li>javascript 语言，对于我们平时开发中，前端必须打开浏览器，他才会执行，对于我们而言，浏览器就是我们前端执行JS的环境，而node.js可以将JS变成后端，可以操作数据库</li></ul><h2 id="2-nodeJS中javascript的组成部分"><a href="#2-nodeJS中javascript的组成部分" class="headerlink" title="2.nodeJS中javascript的组成部分"></a>2.nodeJS中javascript的组成部分</h2><p>ECMAscript核心+全局成员+核心API模块<br>nodejs无需操作浏览器，没有BOM和DOM的概念，取而代之的是全局成员和核心API</p><h2 id="3-运行nodeJS的方式"><a href="#3-运行nodeJS的方式" class="headerlink" title="3.运行nodeJS的方式"></a>3.运行nodeJS的方式</h2><ul><li>在powershell或者vscode的终端中输入node xx.js（注意：运行的JS文件要保证在你终端文件路径下有这个文件，注意路径问题）</li><li>使用repl方式，先输入node，进入repl命令，再输入js代码，这种方法不常用，对于开发人员代码编写很不友好</li></ul><h2 id="4-path环境变量"><a href="#4-path环境变量" class="headerlink" title="4.path环境变量"></a>4.path环境变量</h2><p>在Windows的高级系统设置里面设置Path环境变量为应用程序的路径，这样就可以在命令行快速启动应用程序</p><h1 id="二、ES6常用语法"><a href="#二、ES6常用语法" class="headerlink" title="二、ES6常用语法"></a>二、ES6常用语法</h1><h2 id="1-let和const声明变量"><a href="#1-let和const声明变量" class="headerlink" title="1.let和const声明变量"></a>1.let和const声明变量</h2><p>使用var定义变量存在预解析变量提升的问题；<br>使用var定义的变量没有块级{}作用域，容易造成变量污染</p><p>在ES6语法中使用let定义变量，不会产生变量提升，只能先定义再使用；在{}里使用let定义的变量会产生块级作用域，在{}之外不能访问，例如在if,for等里面<br>在ES6语法中也少量使用const声明常量，它除了具有let的特点之外，必须给初始值，不能被重新赋值修改</p><h2 id="2-解构赋值"><a href="#2-解构赋值" class="headerlink" title="2.解构赋值"></a>2.解构赋值</h2><p>定义：从对象中把属性解放出来，当做变量来使用。语法：let{属性名1，属性名2}=对象名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  name: <span class="string">'kongx'</span>,</span><br><span class="line">  age: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">name</span>: username, age&#125; = user;</span><br><span class="line">username = <span class="string">'man'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(username)<span class="comment">//输出值为man</span></span><br><span class="line"><span class="built_in">console</span>.log(age)<span class="comment">//输出值为18</span></span><br><span class="line"><span class="built_in">console</span>.log(user.name)<span class="comment">//输出值为kongx，let解构赋值不会改变对象属性名对应的属性值</span></span><br></pre></td></tr></table></figure><h2 id="3-箭头函数"><a href="#3-箭头函数" class="headerlink" title="3.箭头函数"></a>3.箭头函数</h2><p>语法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;函数体&#125;;</span><br></pre></td></tr></table></figure></p><p>箭头函数函数实际就是一个匿名函数，没有函数名<br>箭头函数内部的this永远指向外部的this，解决了原生JS的需要修改this指向问题<br>同时可以给箭头函数取名字：let kongx = (形参) =&gt; {函数体}</p><p>箭头函数的变体：</p><ul><li>1.如果左侧形参只有一个，左侧的()可以省略</li><li>2.如果右侧函数体代码只有一行，右侧的{}可以省略，默认会返回执行结果，不能再加return</li><li>3.如果满足上面两个条件，可以同时省略()和{}</li></ul><h2 id="4-定义对象中的属性和方法的快捷方式"><a href="#4-定义对象中的属性和方法的快捷方式" class="headerlink" title="4.定义对象中的属性和方法的快捷方式"></a>4.定义对象中的属性和方法的快捷方式</h2><p>语法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">"kongx"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;name,age,show,say()&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>对象的属性名和变量名相同时，不需要再写一次变量名，相当于”name”:name 省略成name,方法同理<br>对象内定义方法时say(){}相当于say:function(){}</p><h2 id="5-ES6模板字符串"><a href="#5-ES6模板字符串" class="headerlink" title="5.ES6模板字符串"></a>5.ES6模板字符串</h2><p>在javaScript拼接字符串时，需要使用大量的引号和+拼接才能得到我们需要的内容<br>ES6中提供了模板字符串，用 ` (反引号)标识，用${变量}将变量加入到反引号里面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`I age is <span class="subst">$&#123;age&#125;</span>`</span></span><br></pre></td></tr></table></figure></p><p>注意：模板字符串中的换行和空格都会原样输出</p><ul><li><p>在${}中的大括号里可以放入任意的javaScript表达式，还可以进行运算，以及引用对象属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">let</span> y=<span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`a=<span class="subst">$&#123;++x&#125;</span>,y=<span class="subst">$&#123;x+y&#125;</span>`</span>);<span class="comment">//a=10,y=20</span></span><br></pre></td></tr></table></figure></li><li><p>模板字符串还可以调用函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> say = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"i like es6"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`我想说<span class="subst">$&#123;say()&#125;</span>`</span>)<span class="comment">//我想说i like es6</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\cleverkx\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\cleverkx\assets\js\A
      
    
    </summary>
    
      <category term="nodeJs" scheme="https://github.com/cleverkx/categories/nodeJs/"/>
    
    
      <category term="nodeJs" scheme="https://github.com/cleverkx/tags/nodeJs/"/>
    
      <category term="ES6" scheme="https://github.com/cleverkx/tags/ES6/"/>
    
  </entry>
  
</feed>
